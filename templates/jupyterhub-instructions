# Prerequisites

$ uname -a
Linux CharlesH-HP8300-Ubuntu1604 4.4.0-31-generic #50-Ubuntu SMP Wed Jul 13 00:07:12 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux

$ python3 --version
Python 3.5.2
# This must be 3.3 or above

## Install docker
$ sudo apt-get install docker.io

$ docker ps
If this gives a permission error, then do the following.
$ sudo gpasswd -a ${USER} docker
$ sudo service docker restart
$ newgrp docker

Test by
$ docker ps

## Install virtualenv
$ sudo apt-get install virtualenv

## Install npm
$ sudo apt-get install npm nodejs-legacy
$ sudo npm install -g configurable-http-proxy


# Install jupyterhub

## Create virtual environment for jupyterhub
$ cd $HOME
$ mkdir workspaces
$ cd workspaces
$ virtualenv -p python3 venv-jh
$ source venv-jh/bin/activate
After this you see a (venv-jh) prompt.

## Create jupyterhub and its dependencies

$ git clone https://github.com/Atigeo/jupyterhub.git
$ cd jupyterhub
$ $ pip3 install -r requirements.txt -e .

## Create notebooks area
$ cd /
$ sudo mkdir notebooks
$ sudo chmod 777 notebooks/


## Configure jupyterhub
$ cd ~/workspaces/jupyterhub
$ mv jupyterhub_config.py jupyterhub_config.py.old
$ cp templates/jupyterhub_config.py.template1 jupyterhub_config.py

Review the settings, using the IP address of your own workstation in place of '192.168.12.109'.

## Install chrome extensions to send Authentication header
google "chrome modheader"
click first link
click "add to chrome"

in the same way, install editthiscookie

To the right of the address bar, there are two new icons.

## Install jupyter/singleuser
$ docker pull jupyter/singleuser

## Run jupyterhub
$ ~/workspaces/jupyterhub/bin/jupyterhub -f jupyterhub_config.py --no-ssl

## Get a valid token
Go to jwt.io
Paste in the following payload:
{
  "sub": "xsuser",
  "iv-user": "xsuser",
  "iv-groups": "\"admin\",\"healthcare\"",
  "iss": "xPatterns",
  "admin": true
}
Enter "my secret" in the secret.
Copy the token.

Go to the browser and invoke modheader.
Enter name as Authorization and value as Bearer <token>

Then browse to http://localhost:8000/

Should see green button "Start Server".
Press it and you should see a jupyter notebook.  The address bar should be something like:
http://localhost:8000/jupyter/user/xsuser/tree

## Troubleshooting

In /notebooks there should be a directory xsuser owned by the user that ran jupyterhub.

Do docker ps.
There should be a docker with the name jupyter-xsuser.
There should be a node process running:
  /usr/local/bin/configurable-http-proxy.
There should be a python3 process running:
  /usr/local/bin/jupyterhub-singleuser

To clean up the environment, make sure to kill the node process and to *stop and rm* the docker.
Just stopping is not recommended.  Incomplete cleanup can result in the user's notebook directory having the
wrong owner settings.
This can result in being unable to create notebooks in jupyter.


# Set up kerberos and protected notebooks

To proceed we need access to some of the xpatterns services, such as configuration service,
as well as spark and hdfs.
We will use the aws-secure cluster.

Connect to the AWS vpn now.
Test that you can connect to the configuration service by browsing to:
  http://10.0.2.228:7070/configuration/v1
You should see a page of json (a list of dictionaries)

## Install kerberos
$ sudo apt-get install krb5-user

## Install a keytab
$ cd ~/workspaces/jupyterhub
$ mkdir etc
$ cp templates/jupyterhub.keytab etc/


## Get kerberos key
$ cd ~/workspaces/jupyterhub
$ sudo cp templates/krb5.conf /etc
$ kinit -kt etc/jupyterhub.keytab jupyterhub




## Create refresh-keytab
$ mkdir bin
$ cd bin
$ cp templates/refresh-keytab .
$ chmod +x refresh-keytab

Test by running ./refresh-keytab.
You should see "refreshed keytabs!"

# Alter the config file

Edit jupyterhub_config.py
Change  c.DockerSpawner.container_image.
Uncomment the entry as follows.

c.DockerSpawner.container_image = 'docker.staging.xpatterns.com/xpatterns-analytics:89'

Test by running klist.
You should see a single key.


## Create config.properties
$ cd ~/workspaces/jupyterhub/bin
$ cp templates/config_properties .

## Create publish_configs.py
(still in bin)
$ cp templates/publish_configs.py .
$ chmod +x publish_configs.py

Test by running:
python2 publish_configs.py

# If jupyterhub is still running in a window, kill it with ^C.
Then run it again.
$ ~/workspaces/jupyterhub/bin/jupyterhub -f jupyterhub_config.py --no-ssl


## Add a cookie
Browse to localhost:8000
You should see an error message.

Using EditThisCookie (installed above) add the cookie ????

name: jupyter-hub-token-datas1
value: 2|1:0|10:1470319260|24:jupyter-hub-token-datas1|44:ZTI0YmVhN2E4YjNhNDc2YWEyMmU2ZGViMmUxN2JkZDY=|1b9ea97df512a3ace6e21b2446340d380ae85b8fb9ea91e39fc36bf27b14c924
Check Host Only
Click on the check.

## Chenge the token
Do something to change the token.

Then browse to localhost:8000
Select or open a notebook

!klist
You should see a single kerberos token.

Run this:

from xpatterns.analytics.dal import DAL, HDFSSecure
d = DAL()
d.get_databases()



# DevOps setup instructions
https://confluence.life.atigeo.com:8443/display/DEV/Setup+xPatterns+JupyterHub